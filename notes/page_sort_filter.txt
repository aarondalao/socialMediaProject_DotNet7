learning goals
- paging on the API and Client
- sorting on the API and client
- Filtering on the API and client
- IQueryable<T>
	- query variables that stores query commands
	- creates an expression tree
	- executuin is deffered until iteration:
		- forEach loop
		- ToList(), ToArray(), ToDictionary()
		- Singleton queries(Count, Average, etc)
		

1)Adding a Paged List class
	a) Applications/Core folder, create a class called PagedList.cs
	
	b) on PagedList class, edit it's type as a generic type (<T>). then derive from List<T>
	
	c) create 4 properties, namely int CurrentPage, int TotalPage, int PageSize, int TotalCount
	
	d) generate a constructor to populate each properties as well. on the generated PagedList constructor, add another
	parameter of IEnumerable<T> items, then edit as appropriate the other parameters inside the constructor.
	(int count, int pageNumber, int pageSize). after that, edit the assigned properties inside the squigly brackets:
		{
			CurrentPage = pageNumber;
			TotalPages = (int)Math.Ceiling(count / (double)pageSize);
			PageSize = pageSize;
			TotalCount = count;
            AddRange(items);
		}
	e) create a static method inside PagedListt class named CreateAsync. attach a asynchronous flag and
	Task<PagedList<T>>. the parameters of this class would be IQueryable<T> source, int pageNumber and int pageSize
	
	f) inside CreateAsync class, declare a new variable named count with a value of await source.CountAsync(); this will
	create a query about what is the total number of the list.
	
	g) declare another variable named items with a value of source.Skip Method. inside the argument of the skip method:
		(pageNumber - 1) * pageSize.
	
	add a chain to this method by using Take method with an argument of the pageSize and lastly, add the .ToListAsync().
	
	h) return the new PagedList<T> with the EXACT ORDER OF PARAMETERS (items, count, pageNumber, pageSize)
	
2) adding application layer pagination logic

	a) create a new class called PagingParams. this needs to be stored at Application/Core directory.
    b) make a constant setting of the maximum number of page size. this needs to be a private access modifier.
        try to figure is one out yourself. then add another property called pageNumber with an int data type 
        and with an initial value of 1.

    c) create and generate a full property with backing using the propfull snippet with a name of pageSize with int data
        type. set the value of pageSize should be 10 in the getter.

        on the setter, the value of pageSize should be this:
            (value > MaxPageSize) ? MaxPageSize : value

    d) Activities/List.cs
        - this can also be applied to all list that you want to paginate.

        first, replace ALL of the list type into your pagination class (ie, PagedList.cs). this also includes inside the
        Task<> Handle class.
            
            eg: public class Query : IRequest<Result<PagedList<ActivityDto>>>

        then inside the Query class, create a property, you can name this anything (ie, Params)

        another one, inside the public async Task<Result<PagedList<ActivityDto>>> Handle, we need to modify the query from the 
        database in such a way that we'll deferring/posponing it's execution until we create a paged list. to do this, 
        we'll need to specify the query to use from.ToListAsync() to AsQueryable(). then, if the auto import is disabled,
        bring in system.Linq extension to use the AsQueryable Method. also replace the name of tha variable as query for
        conciseness.

        lastly, inside the Success Method of the return Result<PagedList<ActivityDto>, declare this:

            await PagedList<ActivityDto>.CreateAsync()

        the parameters of the CreateAsync should include the query, then the properties of the Paged List named 
        pageNumber and pagesize. you can get the latter 2 parameters using the request then accessing the Params 
        property.
    
    e) ActivitiesController.cs (or any controller that you want to implement pagination)

        select the controller endpoint that you want to implement pagination (in my case, its the Task<IActionResult> 
        GetActivities Method ), then on the parameters, we need to give our API controller a hint on where to find these
        parameters before receiving the query string parameters. for that, we'll use the FromQuery attribute. this 
        specifies that a parameter or property should be bound using the request query string. 

            GetActivities([FromQuery]PagingParams PARAMETER_NAME)

        then change the return line from HandleResult to HandlePagedResult and change the parenthesis from the 
        List.Query() and initialize it using the object initializer with a value of Params = parameters

            List.Query{Params = parameter}


3) Adding a pagination header

4) Adding client side pagination


	