building for production

for more information regarding building your apps before publishing:    
    https://vitejs.dev/guide/
    https://vitejs.dev/guide/build.html

before building:

1) if using create-react-app, MIGRATE TO VITE FIRST! Here's the steps:
    a. Install vitejs

        npm install vite @vitejs/plugin-react-swc eslint eslint-plugin-react-hooks eslint-plugin-react-refresh --save-dev

    b. Uninstall react-scripts

        npm uninstall react-scripts

    c. Replace the existing "scripts" section in package.json with the following:

        "scripts": {
          "start": "vite",
          "dev": "vite",
          "build": "tsc && vite build",
          "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
          "preview": "vite preview"
        },

    d. Create vite.config.ts in client root directory

        import {defineConfig} from 'vite';
        import react from '@vitejs/plugin-react-swc';

        export default defineConfig(() => {
        return {
            build: {
                outDir: '../API/wwwroot'
            },
            server: {
                port: 3000
            },
            plugins: [react()]
            }
        })

    e.  Update the tsconfig.json to what we would get if we created a new vite project

        {
          "compilerOptions": {
            "target": "ES2020",
            "useDefineForClassFields": true,
            "lib": ["ES2020", "DOM", "DOM.Iterable"],
            "module": "ESNext",
            "skipLibCheck": true,

            /* Bundler mode */
            "moduleResolution": "bundler",
            "allowImportingTsExtensions": true,
            "resolveJsonModule": true,
            "isolatedModules": true,
            "noEmit": true,
            "jsx": "react-jsx",

            /* Linting */
            "strict": true,
            "noUnusedLocals": true,
            "noUnusedParameters": true,
            "noFallthroughCasesInSwitch": true
          },
          "include": ["src"],
          "references": [{ "path": "./tsconfig.node.json" }]
        }

    f. Create tsconfig.node.json in the client root folder

        {
            "compilerOptions": {
              "composite": true,
              "skipLibCheck": true,
              "module": "ESNext",
              "moduleResolution": "bundler",
              "allowSyntheticDefaultImports": true
            },
            "include": ["vite.config.ts"]
        }

    g. Create .eslintrc.cjs

        module.exports = {
          root: true,
          env: { browser: true, es2020: true },
          extends: [
            // TODO: uncomment following 2 lines and update code to abide by modern linting rules
            // 'eslint:recommended',
            // 'plugin:@typescript-eslint/recommended',
            'plugin:react-hooks/recommended',
          ],
          ignorePatterns: ['dist', '.eslintrc.cjs'],
          parser: '@typescript-eslint/parser',
          plugins: ['react-refresh'],
          rules: {
            'react-refresh/only-export-components': [
              'off',
              { allowConstantExport: true },
            ],
          },
        }

  
    h.  Move the index.html out of the public folder and into the client root directory.   Remove any PUBLIC_URL references

        <!DOCTYPE html>
        <html lang="en">
          <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <meta name="theme-color" content="#000000" />
            <meta
              name="description"
              content="Web site created using vite"
            />
            <title>React App</title>
          </head>
          <body>
            <noscript>You need to enable JavaScript to run this app.</noscript>
            <div id="root"></div>
            <script type='module' src='/src/main.tsx'></script>
          </body>
        </html>

    i.  If you have .env.development or .env.production update these files so they use the vite environment variables:

        .env.development:

        VITE_API_URL=http://localhost:5000/api
        VITE_CHAT_URL=http://localhost:5000/chat

        .env.production

        VITE_API_URL=/api
        VITE_CHAT_URL=/chat

    j.  Create env.d.ts in the client/src directory

        /// <reference types="vite/client" />

        interface ImportMetaEnv {
            readonly VITE_API_URL: string
            readonly VITE_CHAT_URL: string
            // more env variables...
          }

          interface ImportMeta {
            readonly env: ImportMetaEnv
          }

    k.  Update the agent.ts to use these:

        axios.defaults.baseURL = import.meta.env.VITE_API_URL;

        axios.interceptors.response.use(async response => {
            if (import.meta.env.DEV) await sleep(1000);
            const pagination = response.headers['pagination'];

    l.  Update the commmentStore.ts

        .withUrl(import.meta.env.VITE_CHAT_URL + '?activityId=' + activityId, {

    m. Update index.tsx and remove 'reportWebVitals()'
  
    n. In React 17 you no longer need to import react when writing JSX.  Any imports for 'React' can be removed from all 
    files that have this.

2) update all packages that you're using in the client app to its non-breaking latest versions
    delete the unwanted packages in package.json

    commands that can help:
    npm outdated
    npm install

3) lint your code / do code keeping
    this assumes that you've installed the eslint package and uncommented lines of codes in the .eslintrc.cjs files
    if not, do those first.

    then install these packages:
        npm i @typescript-eslint/parser
        npm i @typescript-eslint/eslint-plugin

    npm commands that can help:

    npm run lint

    then edit out all files that violates the linting rules!
  

BUILDING PROCESS

1) in the client app directory, run this command to run build:

    npm run build

  if there's any errors, fix it.
  else, it will generate a wwwroot folder at the API directory

Run the app in a Kestrel server
  the client app is inside the app now but the API can't serve static contents so this will be configured here.

1) at the Program.cs file, add this middleware 

    app.UseDefaultFiles();
    app.UseStaticFiles();

2) configure the routing of the react application as its own, not the route that is strictly for the API. if the API
does not know the routes other than the configure routes at the MapController and the MapHub, we will need a fallback 
controller for this.

  a) create a FallbackController.cs, delete the other usings and the derive the class to Controller, 
  not the BaseAPIController. then add a route endpoint 

    [AllowAnonymous]
  
    then create an endpoint:

    public IActionResult Index()

  that will return a PhysicalFile and inside the open close parenthesis:

    Path.Combine(Directory,GetCurrentDirectory(), "wwwroot", "index.html"), "text/HTML"

  b) go back to program.cs and add the new middleware 
      
      app.MapFallbackToController("Index", "Fallback");

    where Index is the endpoint that we created in the FallbackController 
    and Fallback is the name of the created controller.
  
3) test the changes either by restarting your API localhost server or starting it
  you should be able to see the production build of the application when using localhost:{YOUR_API_PORT},
  not the localhost:{YOUR_CLIENT_PORT}



